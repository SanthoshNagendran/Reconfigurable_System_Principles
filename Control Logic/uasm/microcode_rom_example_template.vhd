--
-- DO NOT EDIT THIS FILE, your changes will be overwritten
-- This is an automatically generated file.
-- It was generated with uasm, the microassembler, on
-- Wed Nov 27 15:21:25 2019
--
--
-- This is an example instantiation of the microcode ROM into a
-- mock control logic entity.
--
library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;

entity MICROCODE_ROM_template is
end MICROCODE_ROM_template;

architecture RTL of MICROCODE_ROM_template is

  component MICROCODE_ROM
     port( ADDR_IN  : in  unsigned(10 downto 0);
           DATA_OUT : out std_logic_vector(44 downto 0));
  end component;

--
-- Below are signal definitions to carry the individual
-- fields from the microcode ROM.
--
  signal     DATA_OUT : std_logic_vector(44 downto 0);
  signal          CAR : unsigned(10 downto 0);
  signal         ASEL : unsigned(2 downto 0);
  signal         BSEL : unsigned(2 downto 0);
  signal         DSEL : unsigned(2 downto 0);
  signal         FSEL : std_logic_vector(3 downto 0);
  signal         UPDF : std_logic_vector(3 downto 0);
  signal         MUX1 : std_logic;
  signal         MUX2 : unsigned(3 downto 0);
  signal         DATA : unsigned(15 downto 0);
  signal         MISC : std_logic_vector(6 downto 0);

begin
--
-- Below are implied processes that split the microcode ROM
-- output vector into individual fields.

    MICROCODE_ROM1 : MICROCODE_ROM
        port map (
           ADDR_IN  => CAR,
           DATA_OUT => DATA_OUT);

                 ASEL <= unsigned(DATA_OUT(44 downto 42));   -- bit size: 3
                 BSEL <= unsigned(DATA_OUT(41 downto 39));   -- bit size: 3
                 DSEL <= unsigned(DATA_OUT(38 downto 36));   -- bit size: 3
                 FSEL <= DATA_OUT(35 downto 32);   -- bit size: 4
                 UPDF <= DATA_OUT(31 downto 28);   -- bit size: 4
                 MUX1 <= DATA_OUT(27);             -- bit size: 1
                 MUX2 <= unsigned(DATA_OUT(26 downto 23));   -- bit size: 4
                 DATA <= unsigned(DATA_OUT(22 downto  7));   -- bit size: 16
                 MISC <= DATA_OUT( 6 downto  0);   -- bit size: 7
--
-- Yeilding a total data width of 45 bits for 9 fields.
-- The maximum address encountered was 0x7ff, needing 11 bits
--

end RTL;
