procedure microop 
	--(
	--signal ASEL2,BSEL2,DSEL2 	   : in unsigned  (2 downto 0);
	--signal DIN2,RIN2		   : in unsigned (15 downto 0);
	--signal ABUS2,BBUS2	 	   : out unsigned (15 downto 0);
	--) is
 (signal ASEL2 : in integer range 0 to 7,
 signal BSEL2 : in integer range 0 to 7,
 signal DSEL2 : in integer range 0 to 7,
 signal DIN2 : in integer range 0 to 16,
 signal RIN2 : in integer range 0 to 16,
 signal ABUS2 : out integer range 0 to 16,
 signal BBUS2 : out integer range 0 to 16) is  
begin
  signal DSEL1,ASEL1,BSEL1 : unsigned (2 downto 0);
  signal DIN1,RIN1,ABUS1,BBUS1,ABUS3,BBUS3 : unsigned (15 downto 0);
 
	ASEL1 = to_unsigned(ASEL2,3);
	BSEL1 = to_unsigned(BSEL2,3);
	DSEL1 = to_unsigned(DSEL2,3);
	DIN1 = to_unsigned(DIN2,16);
	RIN1 = to_unsigned(RIN2,16);
	ABUS3 = to_unsigned(ABUS2,16);
	BBUS3 = to_unsigned(BBUS2,16);
	if (ABUS1 = ABUS3) then
	report "ABUS matched"
	else
	report "ABUS doesn't match"
	end if;
	if (BBUS1 = BBUS3) then
	report "BBUS matched"
	else
	report "BBUS doesn't match"
	end if;

end procedure microop;
	

      RST1=1'b1;
      @(posedge CLK1);  // Wait for clock
      @(posedge CLK1);  // Wait for clock
      RST1=1'b0;
      @(posedge CLK1);  // Wait for clock
      @(posedge CLK1);  // Wait for clock
      RST1=1'b1;
      
      /* Check that reset worked... all registers should be '0' */
      /* Order of arguments:  ASEL BSEL DSEL DIN RIN ABUS BBUS */
      microop(1,0,0,0,0,0,0);
      microop(2,0,0,0,0,0,0);
      microop(3,0,0,0,0,0,0);
      microop(4,0,0,0,0,0,0);
      microop(5,0,0,0,0,0,0);
      microop(6,0,0,0,0,0,0);
      microop(7,0,0,0,0,0,0);
      microop(0,1,0,0,0,0,0);
      microop(0,2,0,0,0,0,0);
      microop(0,3,0,0,0,0,0);
      microop(0,4,0,0,0,0,0);
      microop(0,5,0,0,0,0,0);
      microop(0,6,0,0,0,0,0);
      microop(0,7,0,0,0,0,0);

      /* Write some values into the registers */
      microop(0,0,1,0,1,0,0);
      microop(0,0,2,0,2,0,0);
      microop(0,0,3,0,3,0,0);
      microop(0,0,4,0,4,0,0);
      microop(0,0,5,0,5,0,0);
      microop(0,0,6,0,6,0,0);
      microop(0,0,7,0,7,0,0);

      @(posedge CLK1);  // Wait for clock
      @(posedge CLK1);  // Wait for clock
      /* Read back on A bus */
      microop(0,0,0,15,10,15,15);
      microop(1,0,0,0,10,1,0);
      microop(2,0,0,0,10,2,0);
      microop(3,0,0,0,10,3,0);
      microop(4,0,0,0,10,4,0);
      microop(5,0,0,0,10,5,0);
      microop(6,0,0,0,10,6,0);
      microop(7,0,0,0,10,7,0);

      @(posedge CLK1);  // Wait for clock
      @(posedge CLK1);  // Wait for clock
      /* Read back on B bus */
      microop(0,0,0,16,12,16,16);
      microop(0,1,0,0,10,0,1);
      microop(0,2,0,0,10,0,2);
      microop(0,3,0,0,10,0,3);
      microop(0,4,0,0,10,0,4);
      microop(0,5,0,0,10,0,5);
      microop(0,6,0,0,10,0,6);
      microop(0,7,0,0,10,0,7);